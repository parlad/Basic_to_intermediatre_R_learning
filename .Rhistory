source('~/Documents/R/programming_basic_in_r.R', echo=TRUE)
source('~/Documents/R/programming_basic_in_r.R', echo=TRUE)
library(dslabs)
data(murders)
murder_rate <- murders$total/murders$population*100000
murder_rate
ind <- which.min(murder_rate)
if (murder_rate[ind] < 0.5) {
print(murders$state[ind])
} else {
print("nort found")
}
ifelse(murder_rate[ind] < 0.5, print(murders$state[ind]) , print("No state found"))
ifelse(murder_rate[ind] < 0.5, print(murders$state[ind]) , print("No state found"))
ifelse(murder_rate[ind] < 0.5, murders$state[ind], print("No state found"))
ifelse(murder_rate[ind] < 0.5, murders$state[ind], print("No state found"))
sum(is.na(na_example)
sum(is.na(na_example))
data(na_example)
sum(is.na(na_example))
no_na <- ifelse(is.na(na_example), 0 , na_example)
sum(is.na(no_na))
z <- c(TRUE, FALSE, FALSE)
any(z)
z <- c(TRUE, FALSE, FALSE)
all(z)
mean
avg <- function(x){
s <- sum(x)
n <- length(x)
s/n
}
avg(12, 12)
avg(12, 12)
avg(c(12, 12))
x <- 1:100
avg(x)
identical(avg(x), mean(x))
s <- 3
avg(1:10)
s
# the general form of a function
my_function <- function(VARIABLE_NAME){
perform operations on VARIABLE_NAME and calculate VALUE
VALUE
}
# functions can have multiple arguments as well as default values
avg <- function(x, arithmetic = TRUE){
n <- length(x)
ifelse(arithmetic, sum(x)/n, prod(x)^(1/n))
}
# functions can have multiple arguments as well as default values
avg <- function(x, arithmetic = TRUE){
n <- length(x)
ifelse(arithmetic, sum(x)/n, prod(x)^(1/n))
}
source('~/Documents/R/functions_r.R', echo=TRUE)
# functions can have multiple arguments as well as default values
avg <- function(x, arithmetic = TRUE){
n <- length(x)
ifelse(arithmetic, sum(x)/n, prod(x)^(1/n))
}
compute_s_n <- function(n){
x: 1:n
sum(x)
}
m <- 25
s_n <- vvector(length = m)
for (n in 1:m) {
s_n[n] <- compute_s_n(n)
}
m <- 25
s_n <- vector(length = m)
for (n in 1:m) {
s_n[n] <- compute_s_n(n)
}
n <- 1:m
plot(n, s_n)
n <- 1:m
plot(n, s_n)
lines(n, n*(n+1)/2)
n <- 1:m
plot(n, s_n)
lines(n, n*(n+1)/2)
lines(n, n*(n+1)/2)
compute_s_n <- function(n){
x: 1:n
sum(x)
}
m <- 25
s_n <- vector(length = m)
for (n in 1:m) {
s_n[n] <- compute_s_n(n)
}
n <- 1:m
plot(n, s_n)
lines(n, n*(n+1)/2)
compute_s_n <- function(n){
x: 1:n
sum(x)
}
m <- 25
s_n <- vector(length = m)
for (n in 1:m) {
s_n[n] <- compute_s_n(n)
}
n <- 1:m
plot(n, s_n)
lines(n, n*(n+1)/2)
source('~/Documents/R/functions_r.R', echo=TRUE)
head(data.frame(s_n = s_n, formula = n*(n+1)/2))
m <- cbind(1, 1:7) # the '1' (= shorter vector) is recycled
m
m <- cbind(m, 8:14)[, c(1, 3, 2)] # insert a column
m
cbind(1:7, diag(3)) # vector is subset -> warning
m <- cbind(1, 1:7) # the '1' (= shorter vector) is recycled
m
m <- cbind(m, 8:14)[, c(1, 3, 2)] # insert a column
m
cbind(1:7, diag(3)) # vector is subset -> warning
Age<-c(56,34,67,33,25,28)
Weight<-c(78,67,56,44,56,89)
Height<-c(165, 171,167,167,166,181)
BMI_df<-data.frame(Age,Weight,Height)
BMI_df
apply(BMI_df, 1, ...)
apply(BMI_df, 1, sum)
apply(BMI_df, 2, sum)
lapply(BMI_df, function(BMI_df) BMI_df/2)
lapply(BMI_df, function(BMI_df) BMI_df/2)
lapply(BMI_df, mean)
sapply(BMI_df, function(BMI_df) BMI_df/2)
sapply(BMI_df, mean)
# sapply function in R
random <- ("This","is","random","vector")
sapply(random,nchar)
# sapply function in R
random <- ("this", "is", "random")
sapply(random,nchar)
random <- ("this", "is", "random")
random <- c("this", "is", "random")
random <- c("this", "is", "random")
sapply(random,nchar)
# mapply function in R
mapply(sum, 1:4, 1:4, 1:4)
1:4
mapply(sum, 1:5, 1:4, 1:4)
mapply(sum, 1:4, 1:4, 1:4)
# mapply function in R
mapply(rep,1:4,1:4)
mapply(rep,1:4,1:2)
mapply(rep,1:4,1:5)
mapply(rep,1:4,1:6)
attach(iris)
tapply(iris$Sepal.Length, Species, mean)
head(iris)
# rapply function in R
x=list(1,2,3,4)
rapply(x,function(x){x^2},class=c("numeric"))
# vapply function in R
vapply(1:5, sqrt, 1i)
1:3 %>% reduce(`+`)
1:3 %>% reduce('+')
1:10 %>% reduce('*')
1:3 %>% reduce('+')
vlist <- list(v1,v2,v3,v4,v5)
addmargins(table(gene=unlist(vlist), vec=rep(paste0("v",1:5),times=sapply(vlist,length))),2,list(Count=function(x) sum(x[x>0])))
vlist <- list(v1,v2,v3,v4,v5)
v1 <- c("geneA","geneB",""...)
v2 <- c("geneA","geneC",""...)
v3 <- c("geneD","geneE",""...)
v4 <- c("geneA","geneE",""...)
v5 <- c("geneB","geneC",""...)
v1 <- c("geneA","geneB")
v2 <- c("geneA","geneC")
v3 <- c("geneD","geneE")
v4 <- c("geneA","geneE")
v5 <- c("geneB","geneC")
vlist <- list(v1,v2,v3,v4,v5)
addmargins(table(gene=unlist(vlist), vec=rep(paste0("v",1:5),times=sapply(vlist,length))),2,list(Count=function(x) sum(x[x>0])))
Reduce(`*`, x=list(5,4,3,2), accumulate=TRUE)
i2 <- seq(0,100,by=2)
i3 <- seq(0,100,by=3)
i5 <- seq(0,100,by=5)
Reduce(intersect, x=list(i2,i3,i5), accumulate=TRUE)
Reduce(intersect, x=list(i2,i3,i5), accumulate=TRUE)
Reduce(intersect, x=list(i2,i3,i5), accumulate=TRUE)
source('~/Documents/R/exercise_4.R', echo=TRUE)
x <- c(FALSE, TRUE)
all(x)
any(x)
any(!x)
all(!x)
x <- c(FALSE, TRUE)
all(x)
any(x)
any(!x)
all(!x)
x <- c(TRUE, TRUE)
all(x)
any(x)
any(!x)
all(!x)
char_len <- nchar(murders$state)
head(char_len)
char_len <- nchar(murders$state)
head(char_len)
nchar(murders$state)
nchar(murders$state)
murders$state
char_len <- nchar(murders$state)
head(char_len)
x <- c(2, 3, -999, 1, 4, 5, -999, 3, 2, 9)
ifelse(x == -999, NA, x)
new_names <- ifelse(length(murders$state) <= 8 , murders$state , murders$abb )
new_names
new_names <- ifelse(length(murders$state) <= 8 , murders$state , murders$abb )
new_names
length(murders$state
murders$state
data(murders)
murders$state
new_names <- all(ifelse(length(murders$state) <= 8 , murders$state , murders$abb ) )
new_names
new_names <- ifelse(length(murders$state) <= 8 , murders$state , murders$abb )
new_names
new_names <- ifelse(length(murders$state) <= 8 , murders$state , murders$abb )
new_names[1:50]
new_names <- ifelse(length(murders$state) <= 8 , murders$state , murders$abb )
new_names[1:50]
new_names <- ifelse(length(murders$state) <= 8 , murders$state , murders$abb )
new_names[1:50]
new_names <- ifelse(length(murders$state) <= 8 , murders$state , murders$abb )
new_names
new_names <- ifelse(length(murders$state) <= 8 , murders$state , murders$abb )
new_names[1:500]
new_names <- ifelse(length(murders$state) <= 8 , murders$state , murders$abb )
new_names
new_names <- ifelse(nchar(murders$state) <= 8 , murders$state , murders$abb )
new_names
# Create function called `sum_n`
sum_n <- function(n){
sum(1:n)
}
# Use the function to determine the sum of integers from 1 to 5000
sum_n(5000)
log_plot <- function(x, y){
plot(log10(x), log10(y))
}
log_plot( 12, 3)
log_plot( 12, 31)
x <- 8
my_func <- function(y){
x <- 9
print(x)
y + x
}
my_func(x)
print(x)
x <- 8
my_func <- function(y){
x <- 9
print(x)
y + x
}
my_func(x)
print(x)
results <- vector("numeric", 10)
n <- 10
for(i in 1:n){
x <- 1:i
results[i] <- sum(x)
}
results[6]
results[7]
# Define the vector of n
n <- 1:25
# Define the vector to store data
s_n <- vector("numeric", 25)
for(i in n){
s_n[i] <- compute_s_n(i)
}
sum_f <- function(n){
sum(n * (n+1)*(n+2)/6)
}
s_n(n)
sum_f(n)
s_n[12]
sum_f(12)
s_n[12]
s_n[2]
# Define the vector of n
n <- 1:25
# Define the function
compute_s_n <- function(n){
x <- 1:n
sum(x^2)
}
# Define the vector to store data
s_n <- vector("numeric", 25)
for(i in n){
s_n[i] <- compute_s_n(i)
}
sum_f <- function(n){
sum(n * (n+1)*(n+2)/6)
}
s_n[2]
sum_f(2)
# Define the vector to store data
s_n <- vector("numeric", 25)
for(i in n){
s_n[i] <- compute_s_n(i)
}
sum_f <- function(n){
sum(n*(n+1)*(2*n+2)/6)
}
s_n[2]
sum_f(2)
s_n[2]
sum_f(2)
s_n[2]
sum_f(2)
s_n[2]
s_n[2]
sum_f(2)
# Define the vector to store data
s_n <- vector("numeric", 25)
for(i in n){
s_n[i] <- compute_s_n(i)
}
sum_f <- function(n){
sum(n*(n+1)*(2*n+1)/6)
}
s_n[2]
sum_f(2)
# Define the vector of n
n <- 1:25
# Define the function
compute_s_n <- function(n){
x <- 1:n
sum(x^2)
}
# Define the vector to store data
s_n <- vector("numeric", 25)
for(i in n){
s_n[i] <- compute_s_n(i)
}
sum_f <- function(n){
sum(n*(n+1)*(2*n+1)/6)
}
s_n
sum_f
# Define the vector of n
n <- 1:25
# Define the function
compute_s_n <- function(n){
x <- 1:n
sum(x^2)
}
# Define the vector to store data
s_n <- vector("numeric", 25)
for(i in n){
s_n[i] <- compute_s_n(i)
}
sum_f <- function(n){
sum(n*(n+1)*(2*n+1)/6)
}
s_n
sum_f
identical(s_n, sum_f())
# Define the function
compute_s_n <- function(n){
x <- 1:n
sum(x^2)
}
# Define the vector to store data
s_n <- vector("numeric", 25)
for(i in n){
s_n[i] <- compute_s_n(i)
}
sum_f <- function(n){
sum(n*(n+1)*(2*n+1)/6)
}
s_n
sum_f
identical(s_n[2], sum_f[2])
# Define the function
compute_s_n <- function(n){
x <- 1:n
sum(x^2)
}
# Define the vector to store data
s_n <- vector("numeric", 25)
for(i in n){
s_n[i] <- compute_s_n(i)
}
sum_f <- function(n){
sum(n*(n+1)*(2*n+1)/6)
}
s_n
sum_f
identical(s_n[2], sum_f(2))
qplot(x, y, data = dimnames)
qplot(dimnames$x, dimnames$y, data = dimnames)
qplot(dimnames$x, dimnames$y, data = dimnames)
library(ggplot2)
library(tidyverse)
library(aplot)
qplot(dimnames$x, dimnames$y, data = dimnames)
data("diamonds")
qplot(dimnames$x, dimnames$y, data = dimnames)
qplot(dimnames$x, dimnames$z, data = diamonds )
data(diamonds)
qplot(dimnames$x, dimnames$z, data = diamonds )
data(diamonds)
qplot(diamonds$x, diamonds$z, data = diamonds )
qplot(x, z, data = diamonds )
qplot(x, data = diamonds )
qplot(cut, data = diamonds )
qplot(cut, data = diamonds, geom = "bar", * = cut)
qplot(cut, data = diamonds, geom = "bar", * = cut)
qplot(cut, data = diamonds, geom = "bar")
qplot(cut, data = diamonds, geom = "bar", color = cut)
qplot(cut, data = diamonds, geom = "bar", "*" = cut)
qplot(cut, data = diamonds, geom = "bar", color = cut)
qplot(color, data = diamonds, geom = "bar", color = cut)
qplot(color, data = diamonds,  color = cut)
qplot(color, data = diamonds, geom = "boxplot", color = cut)
qplot(color, data = diamonds, geom = "multibar", color = cut)
qplot(color, data = diamonds, geom = "bar", color = cut)
qplot(color, data = diamonds, geom = "bar", fill = cut)
qplot(color, data = diamonds, geom = "bar", fill = cut, position = "stack")
qplot(color, data = diamonds, geom = "bar", fill = cut, position = "dodge")
qplot(color, data = diamonds, geom = "bar", fill = cut, position = "identity")
qplot(color, data = diamonds, geom = "bar", fill = cut, position = "fill")
qplot(color, data = diamonds,  fill = cut, position = "stack")
qplot(color, data = diamonds, fill = cut, position = "dodge")
qplot(color, data = diamonds, fill = cut, position = "identity")
qplot(color, data = diamonds, fill = cut, position = "fill")
qplot(color, data = diamonds, fill = cut, position = "dodge")
?position_dodge
?qplot position_dodge
?Position
qplot(color, data = diamonds, fill = cut, position = "dodge")
qplot(cty, hwy, data = mpg)
qplot(cty, hwy, data = mpg, position = "jitter")
ggplot(cty, hwy, data = mpg, position = "jitter")
qplot(color, data = diamonds,  fill = cut, geom = "stack")
qplot(cty, hwy, data = mpg, geom =  = "jitter")
qplot(cty, hwy, data = mpg, geom  = "jitter")
qplot(color, data = diamonds, fill = cut, geom  = "dodge")
qplot(displ, data = mpg, bandwith =1)
qplot(displ, data = mpg, bindwith =1)
# histogram : good for contineous data visualization
qplot(displ, data = mpg, binwidth = 1)
qplot(displ, data = mpg, binwidth = 2)
qplot(displ, data = mpg, binwidth = 0)
qplot(displ, data = mpg, binwidth = 1)
qplot(carat, data = dimnames(), binwidth = 1)
qplot(carat, data = dimnames, binwidth = 1)
qplot(carat, data = diamonds, binwidth = 1)
qplot(carat, data = diamonds, binwidth = .1)
qplot(carat, data = diamonds, binwidth = .01)
zoom <- coord_cartesian(xlim = c(55,70))
qplot(depth, data = diamonds, binwidth = 0.2) + zoom
qplot(depth, data = diamonds, binwidth = 0.2, fill = cut) + zoom
qplot(depth, data = diamonds, binwidth = 0.2) + zoom
qplot(depth, data = diamonds, binwidth = 0.2) + zoom + facet_wrap(~cut)
qplot(depth, data = diamonds, binwidth = 0.2, fill = cut) + zoom + facet_wrap(~cut)
qplot(depth, data = diamonds, binwidth = 0.2, geom = "freqpoly",fill = cut) + zoom + facet_wrap(~cut)
qplot(depth, data = diamonds, binwidth = 0.2, geom = "freqpoly",fill = cut) + zoom
qplot(depth, data = diamonds, binwidth = 0.2, geom = "freqpoly",fill = cut) + zoom
View(m)
qplot(depth, data = diamonds, binwidth = 0.2, geom = "freqpoly",fill = cut) + zoom
qplot(depth, data = diamonds, binwidth = 0.2, geom = "density",fill = cut) + zoom
qplot(depth, data = diamonds, binwidth = 0.2, geom = "freqpoly",fill = cut) + zoom
qplot(depth, data = diamonds, geom = "density",fill = cut) + zoom
qplot(depth, data = diamonds, geom = "density",color = cut) + zoom
qplot(price, data = diamonds, geom = "density",color = cut) + zoom
qplot(price, data = diamonds, geom = "density",color = cut)
qplot(price, data = diamonds, geom = "density", binwidth = 500) + facet_wrap(~cut)
qplot(price, data = diamonds, geom = "density") + facet_wrap(~cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", binwidth = 500) + facet_wrap(~cut)
qplot(price, data = diamonds, geom = "density", geom = "frequency", color = cut)
qplot(price, data = diamonds, geom = "frequency", color = cut)
qplot(price, data = diamonds, geom = "freqpoly", color = cut)
qplot(price, data = diamonds, geom = "density", binwidth = 500) + facet_wrap(~cut)
qplot(price, data = diamonds, geom = "density", binwidth = 500, color = cut)
qplot(carat,price, data = diamonds, geom = "bin2d", color = cut)
qplot(carat,price, data = diamonds, geom = "bin2d", color = cut) + zoom
qplot(carat,price, data = diamonds, geom = "bin2d", color = cut)
qplot(carat,price, data = diamonds, geom = "hex")
install.packages(stat_binhex)
install.packages("stat_binhex")
install.packages("hexbin")
qplot(carat,price, data = diamonds, geom = "hex")
qplot(carat,price, data = diamonds, geom = "density2d")
qplot(carat,price, data = diamonds, geom = c("pint","density2d") )
qplot(carat,price, data = diamonds, geom = c("pint","density2d") )
qplot(carat,price, data = diamonds, geom = "smooth")
qplot(carat,price, data = diamonds, geom = "smooth", color = cut)
qplot(carat,price, data = diamonds, geom = "smooth", group = cut)
qplot(carat,price, data = diamonds, geom = "smooth", color = cut, se = FALSE)
qplot(carat,price, data = diamonds, geom = "smooth", color = cut, se = FALSE, method = lm)
qplot(carat,price, data = diamonds, color = "blue")
qplot(carat,price, data = diamonds, color = color_in)
color_in <- "blue"
qplot(carat,price, data = diamonds, color = color_in)
qplot(carat,price, data = diamonds, color = I("blue"))
getwd()
